lines(y = BASTION_vol,
x = x, type = "l", lwd =lwd_s)
title(main = "Volatility",cex.lab = cex.lab_s)
cex.axis_s_x = 0.7
y = NYelectricity$Demand..MW.
x = as.Date(NYelectricity$Data.Date)
ylab = "Megawatts"
title_line = 5.5
idx = 285:385
x_idx = x[idx]
BASTION_t_mean = as.numeric(BASTION_electric$summary$Trend_sum$Mean)
BASTION_t_upper = BASTION_electric$summary$Trend_sum$CR_upper
BASTION_t_lower = BASTION_electric$summary$Trend_sum$CR_lower
BASTION7_mean = as.numeric(BASTION_electric$summary$Seasonal7_sum$Mean)[idx]
BASTION7_upper = BASTION_electric$summary$Seasonal7_sum$CR_upper[idx]
BASTION7_lower = BASTION_electric$summary$Seasonal7_sum$CR_lower[idx]
ylim7 = c(floor(min(BASTION7_lower)),ceiling(max(BASTION7_upper)))
#
BASTION365_mean = as.numeric(BASTION_electric$summary$Seasonal365_sum$Mean)
BASTION365_upper = BASTION_electric$summary$Seasonal365_sum$CR_upper
BASTION365_lower = BASTION_electric$summary$Seasonal365_sum$CR_lower
ylim365 = c(floor(min(BASTION365_lower)),ceiling(max(BASTION365_upper)))
BASTION_vol = as.numeric(BASTION_electric$summary$Volatility$Mean)
BASTION_vol_upper = as.numeric(BASTION_electric$summary$Volatility$CR_upper)
BASTION_vol_lower = as.numeric(BASTION_electric$summary$Volatility$CR_lower)
ylim_v = c(floor(min(BASTION_vol_lower)),ceiling(max(BASTION_vol_upper)))
######################
layout(matrix(c(3, 1, 2, 4), nrow = 2, byrow = TRUE))
par(mar = margin_size1)
plot(y = BASTION7_mean,
x = x_idx,
type = "l",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = ylim7)
pretty_y <- pretty(c(BASTION7_mean,BASTION7_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x_idx[seq(1, length(x_idx), length.out = 6)],     # x-axis with tick marks
labels = format(x_idx[seq(1, length(x_idx), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
x_coords <- 1:length(BASTION7_mean)  # X-coordinates
polygon(c(x_idx, rev(x_idx)),
c(BASTION7_upper,
rev(BASTION7_lower)),
col = "grey", border = NA)
lines(y = BASTION7_mean,
x = x_idx, type = "l", lwd =lwd_s)
title(main = "Weekly Seasonality",cex.lab = cex.lab_s)
par(mar = margin_size1)
plot(y = BASTION365_mean,
x = x,
type = "l",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = ylim365)
pretty_y <- pretty(c(BASTION365_mean,BASTION365_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
x_coords <- 1:length(BASTION365_mean)  # X-coordinates
polygon(c(x, rev(x)),
c(BASTION365_upper,
rev(BASTION365_lower)),
col = "grey", border = NA)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
lines(y = BASTION365_mean,
x = x, type = "l", lwd =lwd_s)
title(main = "Yearly Seasonality",cex.lab = cex.lab_s)
par(mar = margin_size1)
plot(y = y,
x = x,
pch = 20,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
col = "grey80")
pretty_y <- pretty(c(y,BASTION_t_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
polygon(c(x, rev(x)),
c(BASTION_t_upper,
rev(BASTION_t_lower)),
col = "grey50", border = NA)
lines(y = BASTION_t_mean,
x = x, type = "l", lwd =lwd_s)
title(main = "Trend",cex.lab = cex.lab_s)
par(mar = margin_size1)
plot(y = BASTION_vol,
x = x,
type = "l",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = ylim_v)
pretty_y <- pretty(c(BASTION_vol,BASTION_vol_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
polygon(c(x, rev(x)),
c(BASTION_vol_upper ,
rev(BASTION_vol_lower)),
col = "grey50", border = NA)
lines(y = BASTION_vol,
x = x, type = "l", lwd =lwd_s)
title(main = "Volatility",cex.lab = cex.lab_s)
cex.axis_s_x = 0.7
y = NYelectricity$Demand..MW.
x = as.Date(NYelectricity$Data.Date)
ylab = "Megawatts"
title_line = 5.5
idx = 285:385
x_idx = x[idx]
BASTION_t_mean = as.numeric(BASTION_electric$summary$Trend_sum$Mean)
BASTION_t_upper = BASTION_electric$summary$Trend_sum$CR_upper
BASTION_t_lower = BASTION_electric$summary$Trend_sum$CR_lower
BASTION7_mean = as.numeric(BASTION_electric$summary$Seasonal7_sum$Mean)[idx]
BASTION7_upper = BASTION_electric$summary$Seasonal7_sum$CR_upper[idx]
BASTION7_lower = BASTION_electric$summary$Seasonal7_sum$CR_lower[idx]
ylim7 = c(floor(min(BASTION7_lower)),ceiling(max(BASTION7_upper)))
#
BASTION365_mean = as.numeric(BASTION_electric$summary$Seasonal365_sum$Mean)
BASTION365_upper = BASTION_electric$summary$Seasonal365_sum$CR_upper
BASTION365_lower = BASTION_electric$summary$Seasonal365_sum$CR_lower
ylim365 = c(floor(min(BASTION365_lower)),ceiling(max(BASTION365_upper)))
BASTION_vol = as.numeric(BASTION_electric$summary$Volatility$Mean)
BASTION_vol_upper = as.numeric(BASTION_electric$summary$Volatility$CR_upper)
BASTION_vol_lower = as.numeric(BASTION_electric$summary$Volatility$CR_lower)
ylim_v = c(floor(min(BASTION_vol_lower)),ceiling(max(BASTION_vol_upper)))
######################
layout(matrix(c(3, 1, 2, 4), nrow = 2, byrow = TRUE))
par(mar = margin_size1)
plot(y = BASTION7_mean,
x = x_idx,
type = "l",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = ylim7)
pretty_y <- pretty(c(BASTION7_mean,BASTION7_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x_idx[seq(1, length(x_idx), length.out = 6)],     # x-axis with tick marks
labels = format(x_idx[seq(1, length(x_idx), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
x_coords <- 1:length(BASTION7_mean)  # X-coordinates
polygon(c(x_idx, rev(x_idx)),
c(BASTION7_upper,
rev(BASTION7_lower)),
col = "grey", border = NA)
lines(y = BASTION7_mean,
x = x_idx, type = "l", lwd =lwd_s)
title(main = "Weekly Seasonality",cex.lab = cex.lab_s)
par(mar = margin_size1)
plot(y = BASTION365_mean,
x = x,
type = "l",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = ylim365)
pretty_y <- pretty(c(BASTION365_mean,BASTION365_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
x_coords <- 1:length(BASTION365_mean)  # X-coordinates
polygon(c(x, rev(x)),
c(BASTION365_upper,
rev(BASTION365_lower)),
col = "grey", border = NA)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
lines(y = BASTION365_mean,
x = x, type = "l", lwd =lwd_s)
title(main = "Yearly Seasonality",cex.lab = cex.lab_s)
par(mar = margin_size1)
plot(y = y,
x = x,
pch = 20,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
col = "grey80")
pretty_y <- pretty(c(y,BASTION_t_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
polygon(c(x, rev(x)),
c(BASTION_t_upper,
rev(BASTION_t_lower)),
col = "grey50", border = NA)
lines(y = BASTION_t_mean,
x = x, type = "l", lwd =lwd_s)
title(main = "Trend",cex.lab = cex.lab_s)
par(mar = margin_size1)
plot(y = BASTION_vol,
x = x,
type = "l",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = ylim_v)
pretty_y <- pretty(c(BASTION_vol,BASTION_vol_upper))  # Generates nice tick mark values
axis(2, cex.axis = cex.axis_s_y,
at = pretty_y,
labels = format(pretty_y, big.mark = ",", scientific = FALSE),
las = 1)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = title_line)
polygon(c(x, rev(x)),
c(BASTION_vol_upper ,
rev(BASTION_vol_lower)),
col = "grey50", border = NA)
lines(y = BASTION_vol,
x = x, type = "l", lwd =lwd_s)
title(main = "Volatility",cex.lab = cex.lab_s)
lwd_s = 1.5
idx = 1:730
STR_season = STR_elec$output$predictors[[3]]$data[idx]
saveRDS("../inst/exdata/BASTION_electric.rds")
saveRDS(BASTION_electric,"../inst/exdata/BASTION_electric.rds")
BASTION_electric <- readRDS("/Users/bc454/Desktop/Research/Project_Decomposition/BASTION_electric.RDS")
BASTION_electric$summary$Trend_sum
colnames()BASTION_electric$summary$Trend_sum
colnames(BASTION_electric$summary$Trend_sum)
BASTION_electric$summary$Volatility = data.frame(
Mean = apply(sqrt(BASTION_electric$samples$obs_sigma_t2),2,mean),
CR_lower =  apply(sqrt(BASTION_electric$samples$obs_sigma_t2),2,quantile,0.025),
CR_upper =  apply(sqrt(BASTION_electric$samples$obs_sigma_t2),2,quantile,0.975)
)
BASTION_electric$summary$p_means= NULL
BASTION_electric$samples = NULL
saveRDS(BASTION_electric,file = "../inst/exdata/BASTION_electric.rds")
saveRDS(BASTION_electric,file = "../inst/extdata/BASTION_electric.rds")
devtools::load_all()
set.seed(40)
BASTION_sim = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 5000)
par(mar = margin_size1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# arguments for figures:
cex_s = 0.8
cex.axis_s = 1
cex.axis_s_y = 0.9
cex.axis_s_x = 0.9
cex.main_s = 1.75
cex.lab_s = 1.25
lwd_s = 2.5
line = 2.5
cex_l = 0.8
margin_size1 = c(4,4,1,1)
generate_T <- function(n) {
# Generate random parameters
m <- runif(4, -50, 50)  # Slopes
c <- runif(4, -25, 25)  # Intercepts
b <- runif(3, 30, n%/%4)  # Breakpoints b1, b2, b3
# Define breakpoints
breakpoints <- cumsum(c(0, b, n - sum(b)))
# Define the piecewise function
T <- function(t) {
if (t >= 0 && t < breakpoints[2]) {
return(m[1] * 0.01 * (t - breakpoints[1]) + c[1])
} else if (t >= breakpoints[2] && t < breakpoints[3]) {
return(m[2] * 0.01 * (t - breakpoints[2]) + c[2])
} else if (t >= breakpoints[3] && t < breakpoints[4]) {
return(m[3] * 0.01 * (t - breakpoints[3]) + c[3])
} else if (t >= breakpoints[4] && t <= n) {
return(m[4] * 0.01 * (t - breakpoints[4]) + c[4])
} else {
return(NA)  # Out of range
}
}
# Generate a sequence of t values
t_values <- 1:n
T_values <- sapply(t_values, T)
# Return the results
return(list(
T_function = T,
t_values = t_values,
T_values = T_values,
parameters = list(m = m, c = c, b = b, breakpoints = breakpoints)
))
}
gen_sim <- function(n,seed){
#setting seed
set.seed(seed)
# trend componenet
trend = generate_T(n)$T_values
# remainder
error_sd <- stochvol::svsim(n, mu = 4, phi = 0.98, sigma = 0.3, nu = Inf, rho = 0)
errors = rnorm(n,0,error_sd$vol)
vol = error_sd$vol
# errors = rnorm(n,0,5)
# vol = 5
period1 <- 7
period2 <- 30
# Generate seasonality components
# First seasonality term
season1 <- rnorm(1,0,10)*sin(2 * pi * (1:n) / period1) + rnorm(1,0,10)*cos(2*pi*(1:n)/period1)
season1 <- season1 - mean(season1)  # Adjust to make the first term 0
#second seasonality term
season2 <- rnorm(1,0,15)*sin(2 * pi * (1:n) / period2) + rnorm(1,0,15)*cos(2 * pi * (1:n) / period2)
season2 <- season2 - mean(season2) # Adjust to make the first term 0
season = season1 + season2
#Outlier term
n_outliers = rpois(1,5)
outlier_ind = sample(c(5:n),size = n_outliers,replace = FALSE)
outliers = numeric(n)
outliers[outlier_ind] = rcauchy(n_outliers,loc = 35,scale = 4)*
sample(c(-1,1),size = n_outliers,replace = TRUE)
y = trend +season1 + season2 + outliers + errors
return(as.data.frame(cbind(y,trend,season,season1,season2,outliers,errors,vol)))
}
y=gen_sim(500,2)
devtools::install_github("Jasoncho0914/BASTION")
library(BASTION)
#running below takes about 5 minutes total.
set.seed(40)
BASTION_sim = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 5000)
set.seed(40)
BASTION_sim = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 4000)
BASTION_sim <- readRDS("../inst/extdata/BASTION_sim.rds")
TBATScomp = readRDS("../inst/extdata/TBATScomp.rds")
STR = readRDS("../inst/extdata/STR.rds")
MSTL = readRDS("../inst/extdata/MSTL.rds")
library(BASTION)
#running below takes about 5 minutes total.
set.seed(40)
BASTION_sim = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 4000)
y_ts <- forecast::msts(y[,"y"], seasonal.periods=c(7,30))
TBATS = forecast::tbats(y_ts)
TBATScomp = forecast::tbats.components(TBATS)
STR = stR::AutoSTR(y_ts,robust = TRUE,confidence = 0.95)
MSTL = forecast::mstl(y_ts)
BASTION_sim$summary$Volatility$Mean
plot(BASTION_sim$summary$Volatility$Mean)
devtools::document()
devtools::check()
devtools::document()
devtools
devtools::docuent()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::check(build_vignettes = TRUE)
devtools::check()
devtools::check(build_vignettes = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
install.packages("tidytemplate")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
document()
library(devtools)
document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_build_ignore("README_pkgdown.md")
pkgdown::build_site()
pkgdown::preview_site(path='404.html')
pkgdown::clean_site()
edit_r_buildignore()
usethis::use_git_ignore("README.md")
pkgdown::build_site()
pkgdown::build_site()
edit_git_ignore()
edit_git_ignore()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::gh_token_help()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
build_site()
build_site()
