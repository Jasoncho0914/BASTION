ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
lines(fit$summary$p_means$Trend,lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = 2.5)
title(ylab = "Trend", cex.lab = cex.lab_s, line = 2.5)
png(paste0("figures/trend.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$y,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
lines(fit$summary$p_means$Trend,lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Trend", cex.lab = cex.lab_s, line = 2.5)
dev.off()
plot(fit$summary$p_means$Seasonal12,
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
type = "l"
lwd = 4)
plot(fit$summary$p_means$y,ylim = c(-1,13),ylab = "Trend")
lines(fit$summary$p_means$Trend,lwd = 4)
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12,type= "l",ylab = "Seasonality (k=12)")
#Remainder
plot(fit$summary$p_means$Remainder,type = "l",ylab = "Remainder")
###################################################
cex_s = 2             # Point size
cex.axis_s_y = 1.5       # Y-axis text size
cex.axis_s_x = 1.2       # X-axis text size
cex.main_s = 1.5         # Main title text size
cex.lab_s = 1.5         # Axis label text size
lwd_s = 3              # Line width
figure_width = 500       # Width
figure_height = 300      # Reduced height to compact space
png(paste0("figures/trend.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$y,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
lines(fit$summary$p_means$Trend,lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Trend", cex.lab = cex.lab_s, line = 2.5)
dev.off()
png(paste0("figures/seasonality.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$Seasonal12,
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
type = "l",
lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Seasonality", cex.lab = cex.lab_s, line = 2.5)
dev.off()
png(paste0("figures/Remainder.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$Remainder,
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
type = "l",
lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Remainder", cex.lab = cex.lab_s, line = 2.5)
dev.off()
usethis::use_citation()
citation(BASTION)
document()
build()
check()
document()
build()
check()
data("airtraffic")
load("data/airtraffic.rda")
load("data/airtraffic.rda")
build()
data("airtraffic")
document()
document()
document()
check()
check()
devtools::build()
document()
check()
build()
check()
#devtools::install_github("Jasoncho0914/BASTION")
library(BASTION)
library(forecast)
library(stR)
set.seed(31)
BASTION = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 4000)
generate_T <- function(n) {
# Generate random parameters
m <- runif(4, -50, 50)  # Slopes
c <- runif(4, -25, 25)  # Intercepts
b <- runif(3, 30, n%/%4)  # Breakpoints b1, b2, b3
# Define breakpoints
breakpoints <- cumsum(c(0, b, n - sum(b)))
# Define the piecewise function
T <- function(t) {
if (t >= 0 && t < breakpoints[2]) {
return(m[1] * 0.01 * (t - breakpoints[1]) + c[1])
} else if (t >= breakpoints[2] && t < breakpoints[3]) {
return(m[2] * 0.01 * (t - breakpoints[2]) + c[2])
} else if (t >= breakpoints[3] && t < breakpoints[4]) {
return(m[3] * 0.01 * (t - breakpoints[3]) + c[3])
} else if (t >= breakpoints[4] && t <= n) {
return(m[4] * 0.01 * (t - breakpoints[4]) + c[4])
} else {
return(NA)  # Out of range
}
}
# Generate a sequence of t values
t_values <- 1:n
T_values <- sapply(t_values, T)
# Return the results
return(list(
T_function = T,
t_values = t_values,
T_values = T_values,
parameters = list(m = m, c = c, b = b, breakpoints = breakpoints)
))
}
gen_sim <- function(n,seed){
#setting seed
set.seed(seed)
# trend componenet
trend = generate_T(n)$T_values
# remainder
error_sd <- stochvol::svsim(n, mu = 4, phi = 0.98, sigma = 0.3, nu = Inf, rho = 0)
errors = rnorm(n,0,error_sd$vol)
vol = error_sd$vol
# errors = rnorm(n,0,5)
# vol = 5
period1 <- 7
period2 <- 30
# Generate seasonality components
# First seasonality term
season1 <- rnorm(1,0,10)*sin(2 * pi * (1:n) / period1) + rnorm(1,0,10)*cos(2*pi*(1:n)/period1)
season1 <- season1 - mean(season1)  # Adjust to make the first term 0
#second seasonality term
season2 <- rnorm(1,0,15)*sin(2 * pi * (1:n) / period2) + rnorm(1,0,15)*cos(2 * pi * (1:n) / period2)
season2 <- season2 - mean(season2) # Adjust to make the first term 0
season = season1 + season2
#Outlier term
n_outliers = rpois(1,5)
outlier_ind = sample(c(5:n),size = n_outliers,replace = FALSE)
outliers = numeric(n)
outliers[outlier_ind] = rcauchy(n_outliers,loc = 35,scale = 4)*
sample(c(-1,1),size = n_outliers,replace = TRUE)
y = trend +season1 + season2 + outliers + errors
return(as.data.frame(cbind(y,trend,season,season1,season2,outliers,errors,vol)))
}
devtool::check()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::install()
generate_T <- function(n) {
# Generate random parameters
m <- runif(4, -50, 50)  # Slopes
c <- runif(4, -25, 25)  # Intercepts
b <- runif(3, 30, n%/%4)  # Breakpoints b1, b2, b3
# Define breakpoints
breakpoints <- cumsum(c(0, b, n - sum(b)))
# Define the piecewise function
T <- function(t) {
if (t >= 0 && t < breakpoints[2]) {
return(m[1] * 0.01 * (t - breakpoints[1]) + c[1])
} else if (t >= breakpoints[2] && t < breakpoints[3]) {
return(m[2] * 0.01 * (t - breakpoints[2]) + c[2])
} else if (t >= breakpoints[3] && t < breakpoints[4]) {
return(m[3] * 0.01 * (t - breakpoints[3]) + c[3])
} else if (t >= breakpoints[4] && t <= n) {
return(m[4] * 0.01 * (t - breakpoints[4]) + c[4])
} else {
return(NA)  # Out of range
}
}
# Generate a sequence of t values
t_values <- 1:n
T_values <- sapply(t_values, T)
# Return the results
return(list(
T_function = T,
t_values = t_values,
T_values = T_values,
parameters = list(m = m, c = c, b = b, breakpoints = breakpoints)
))
}
gen_sim <- function(n,seed){
#setting seed
set.seed(seed)
# trend componenet
trend = generate_T(n)$T_values
# remainder
error_sd <- stochvol::svsim(n, mu = 4, phi = 0.98, sigma = 0.3, nu = Inf, rho = 0)
errors = rnorm(n,0,error_sd$vol)
vol = error_sd$vol
# errors = rnorm(n,0,5)
# vol = 5
period1 <- 7
period2 <- 30
# Generate seasonality components
# First seasonality term
season1 <- rnorm(1,0,10)*sin(2 * pi * (1:n) / period1) + rnorm(1,0,10)*cos(2*pi*(1:n)/period1)
season1 <- season1 - mean(season1)  # Adjust to make the first term 0
#second seasonality term
season2 <- rnorm(1,0,15)*sin(2 * pi * (1:n) / period2) + rnorm(1,0,15)*cos(2 * pi * (1:n) / period2)
season2 <- season2 - mean(season2) # Adjust to make the first term 0
season = season1 + season2
#Outlier term
n_outliers = rpois(1,5)
outlier_ind = sample(c(5:n),size = n_outliers,replace = FALSE)
outliers = numeric(n)
outliers[outlier_ind] = rcauchy(n_outliers,loc = 35,scale = 4)*
sample(c(-1,1),size = n_outliers,replace = TRUE)
y = trend +season1 + season2 + outliers + errors
return(as.data.frame(cbind(y,trend,season,season1,season2,outliers,errors,vol)))
}
# arguments for figures:
cex_s = 0.8
cex.axis_s = 1
cex.axis_s_y = 0.9
cex.axis_s_x = 0.9
cex.main_s = 1.75
cex.lab_s = 1.25
lwd_s = 2.5
line = 2.5
cex_l = 0.8
margin_size1 = c(4,4,1,1)
y=gen_sim(500,2)
# layout(matrix(c(1, 1, 2, 2,
#                 0, 3, 3, 0), nrow = 2, byrow = TRUE))
par(mar = margin_size1)
plot(y[,"y"],
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s,
cex.main = cex.main_s,
axes = FALSE)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
abline(v = which(y[,c("outliers")] != 0),col = "red",lty = 2,lwd = lwd_s*3/5)
lines(y[,"trend"]+y[,"season"], type = "l", lwd = lwd_s, col = "blue")
lines(y[,"trend"], type = "l", lwd = lwd_s, col = "black")
legend("topright", lwd = 2,lty = c(1,1,2),col = c("black","blue","red"),
legend = c("Trend","Trend+Seasonality","Outliers"),
cex = cex_l)
title(ylab = "Observations", cex.lab = cex.lab_s, line = line)
title(xlab = "Time", cex.lab = cex.lab_s, line = line)
# plot(y[,"season1"][1:100],type = "l",col = "black",ylim = c(-20,20),lwd = lwd_s,
#      xlab = "",
#      ylab = "",
#      main = "",
#      cex = cex_s,
#      cex.axis = cex.axis_s,
#      cex.main = cex.main_s,
#      axes = FALSE)
# axis(2,cex.axis = cex.axis_s_y)
# axis(1,cex.axis = cex.axis_s_x)
# lines(y[,"season2"][1:100], type = "l", lwd = lwd_s,col = "blue")
# legend("topright", lwd = 2,lty = 1,col = c("black","blue"),
#        legend = c("Weekly","Monthly"),
#        cex = cex_l)
# title(ylab = "Seasonality", cex.lab = cex.lab_s, line = line)
# title(xlab = "Time", cex.lab = cex.lab_s, line = line)
#
# plot(y[,"errors"],type = "l",col = "black",lwd = lwd_s,
#      xlab = "",
#      ylab = "",
#      main = "",
#      cex = cex_s,
#      cex.axis = cex.axis_s,
#      cex.main = cex.main_s,
#      axes = FALSE)
# axis(2,cex.axis = cex.axis_s_y)
# axis(1,cex.axis = cex.axis_s_x)
# title(ylab = "Remainder", cex.lab = cex.lab_s, line = line)
# title(xlab = "Time", cex.lab = cex.lab_s, line = line)
#
#devtools::install_github("Jasoncho0914/BASTION")
library(BASTION)
library(forecast)
library(stR)
set.seed(31)
BASTION = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 4000)
devtools::install_github("Jasoncho0914/BASTION")
devtools::install_github("Jasoncho0914/BASTION")
library(BASTION)
library(forecast)
library(stR)
set.seed(31)
BASTION = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 4000)
generate_T <- function(n) {
# Generate random parameters
m <- runif(4, -50, 50)  # Slopes
c <- runif(4, -25, 25)  # Intercepts
b <- runif(3, 30, n%/%4)  # Breakpoints b1, b2, b3
# Define breakpoints
breakpoints <- cumsum(c(0, b, n - sum(b)))
# Define the piecewise function
T <- function(t) {
if (t >= 0 && t < breakpoints[2]) {
return(m[1] * 0.01 * (t - breakpoints[1]) + c[1])
} else if (t >= breakpoints[2] && t < breakpoints[3]) {
return(m[2] * 0.01 * (t - breakpoints[2]) + c[2])
} else if (t >= breakpoints[3] && t < breakpoints[4]) {
return(m[3] * 0.01 * (t - breakpoints[3]) + c[3])
} else if (t >= breakpoints[4] && t <= n) {
return(m[4] * 0.01 * (t - breakpoints[4]) + c[4])
} else {
return(NA)  # Out of range
}
}
# Generate a sequence of t values
t_values <- 1:n
T_values <- sapply(t_values, T)
# Return the results
return(list(
T_function = T,
t_values = t_values,
T_values = T_values,
parameters = list(m = m, c = c, b = b, breakpoints = breakpoints)
))
}
gen_sim <- function(n,seed){
#setting seed
set.seed(seed)
# trend componenet
trend = generate_T(n)$T_values
# remainder
error_sd <- stochvol::svsim(n, mu = 4, phi = 0.98, sigma = 0.3, nu = Inf, rho = 0)
errors = rnorm(n,0,error_sd$vol)
vol = error_sd$vol
# errors = rnorm(n,0,5)
# vol = 5
period1 <- 7
period2 <- 30
# Generate seasonality components
# First seasonality term
season1 <- rnorm(1,0,10)*sin(2 * pi * (1:n) / period1) + rnorm(1,0,10)*cos(2*pi*(1:n)/period1)
season1 <- season1 - mean(season1)  # Adjust to make the first term 0
#second seasonality term
season2 <- rnorm(1,0,15)*sin(2 * pi * (1:n) / period2) + rnorm(1,0,15)*cos(2 * pi * (1:n) / period2)
season2 <- season2 - mean(season2) # Adjust to make the first term 0
season = season1 + season2
#Outlier term
n_outliers = rpois(1,5)
outlier_ind = sample(c(5:n),size = n_outliers,replace = FALSE)
outliers = numeric(n)
outliers[outlier_ind] = rcauchy(n_outliers,loc = 35,scale = 4)*
sample(c(-1,1),size = n_outliers,replace = TRUE)
y = trend +season1 + season2 + outliers + errors
return(as.data.frame(cbind(y,trend,season,season1,season2,outliers,errors,vol)))
}
# arguments for figures:
cex_s = 0.8
cex.axis_s = 1
cex.axis_s_y = 0.9
cex.axis_s_x = 0.9
cex.main_s = 1.75
cex.lab_s = 1.25
lwd_s = 2.5
line = 2.5
cex_l = 0.8
margin_size1 = c(4,4,1,1)
y=gen_sim(500,2)
# layout(matrix(c(1, 1, 2, 2,
#                 0, 3, 3, 0), nrow = 2, byrow = TRUE))
par(mar = margin_size1)
plot(y[,"y"],
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s,
cex.main = cex.main_s,
axes = FALSE)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
abline(v = which(y[,c("outliers")] != 0),col = "red",lty = 2,lwd = lwd_s*3/5)
lines(y[,"trend"]+y[,"season"], type = "l", lwd = lwd_s, col = "blue")
lines(y[,"trend"], type = "l", lwd = lwd_s, col = "black")
legend("topright", lwd = 2,lty = c(1,1,2),col = c("black","blue","red"),
legend = c("Trend","Trend+Seasonality","Outliers"),
cex = cex_l)
title(ylab = "Observations", cex.lab = cex.lab_s, line = line)
title(xlab = "Time", cex.lab = cex.lab_s, line = line)
# plot(y[,"season1"][1:100],type = "l",col = "black",ylim = c(-20,20),lwd = lwd_s,
#      xlab = "",
#      ylab = "",
#      main = "",
#      cex = cex_s,
#      cex.axis = cex.axis_s,
#      cex.main = cex.main_s,
#      axes = FALSE)
# axis(2,cex.axis = cex.axis_s_y)
# axis(1,cex.axis = cex.axis_s_x)
# lines(y[,"season2"][1:100], type = "l", lwd = lwd_s,col = "blue")
# legend("topright", lwd = 2,lty = 1,col = c("black","blue"),
#        legend = c("Weekly","Monthly"),
#        cex = cex_l)
# title(ylab = "Seasonality", cex.lab = cex.lab_s, line = line)
# title(xlab = "Time", cex.lab = cex.lab_s, line = line)
#
# plot(y[,"errors"],type = "l",col = "black",lwd = lwd_s,
#      xlab = "",
#      ylab = "",
#      main = "",
#      cex = cex_s,
#      cex.axis = cex.axis_s,
#      cex.main = cex.main_s,
#      axes = FALSE)
# axis(2,cex.axis = cex.axis_s_y)
# axis(1,cex.axis = cex.axis_s_x)
# title(ylab = "Remainder", cex.lab = cex.lab_s, line = line)
# title(xlab = "Time", cex.lab = cex.lab_s, line = line)
#
devtools::install_github("Jasoncho0914/BASTION")
library(BASTION)
library(forecast)
library(stR)
set.seed(31)
BASTION = fit_BASTION(y = y[,"y"],
Ks = list(7,30),
Outlier = TRUE,
cl= 0.95,
obsSV = "SV",
nsave = 2000,
nburn = 4000)
devtoos::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build()
devtools::install()
devtools::install_github("Jasoncho0914/BASTION")
devtools::install()
devtools::build()
devtools::install()
devtools::document()
devtools::check()
devtoos::install()
devtools::install()
