seasonality = list(12)
BASTIONfit <- fit_BASTION(y = passenger,
Ks = list(12),
Outlier = FALSE,
sparse = TRUE)
BASTIONfit
BASTIONfit$summary
BASTIONfit$summary$p_means
BASTIONfit$summary$p_means
BASTIONfit$summary$p_means[,1]
plot(BASTIONfit$summary$p_means[,1])
plot(BASTIONfit$summary$p_means[,2])
plot(BASTIONfit$summary$p_means[,3])
plot(BASTIONfit$summary$p_means[,4])
plot(BASTIONfit$summary$p_means[,5])
plot(BASTIONfit$summary$p_means[,4])
plot(BASTIONfit$summary$p_means[,2])
plot(BASTIONfit$summary$p_means[,2],type = "l")
BASTIONfit$summary
BASTIONfit$samples$beta_combined
BASTIONfit$samples$beta
str(BASTIONfit$samples$beta_combined)
str(BASTIONfit$samples$beta_combined)
devtools::document()
?fit_BASTION
BASTION (Bayesian Adaptive Seasonal Time-Series Decomposition) is an R package for decomposing time-series data into trend, seasonal, and outlier components, while accounting for time-varying volatility. It is particularly effective for complex, multi-seasonal datasets with stochastic volatility.
BASTION (Bayesian Adaptive Seasonal Time-Series Decomposition) is an R package for decomposing time-series data into trend, seasonal, and outlier components, while accounting for time-varying volatility. It is particularly effective for complex, multi-seasonal datasets with stochastic volatility.
We have one main function ``B''
library(BASTION)
library(BASTION)
BASTION::fit_BASTION
forecast::AirPassengers
View(AirPassengers)
airp_l = AirPassengers
## Installation
```r
## Quick Start
The main function is `fit_BASTION'. Followig is a quick demonstration using the Airline Passenger data between 1949 to 1960.
```r
AirPassengers
as.vector(AirPassengers)
str(as.vector(AirPassengers))
str(AirPassengers)
str(AirPassengers)
str(AirPassengers)[[1]]
str(AirPassengers)
str(AirPassengers)
if (!is.list(Ks)) {
stop("Ks needs to be a list")
}
AirPassengers
AirPassengers
as.vector(AirPassengers)
#' A list containing MCMC samples of the relevant parameters:
#' - `beta_combined`: Posterior samples of **Trend + Seasonality**.
#' - `beta`: Posterior samples of each component excluding the remainder.
#' - `obs_sigma_t2`: Posterior samples of the variance of the observation equation.
#' - `evol_sigma_t2`: Posterior samples of the evolution error term.
#' - `remainder`: Posterior samples of the remainder term.
#' - `yhat`: Posterior samples of the signal + error term.
#'
#' @import progress spam abind
#' @export
fit_BASTION = function(y,Ks,X=NULL,Outlier,cl=0.95,sparse = FALSE,obsSV = "const",
nchains = 2,nsave = 1000, nburn= 1000, nskip = 4,
verbose = TRUE){
y = as.vector(y)
if (!is.list(Ks)) {
stop("Ks needs to be a list")
}
if (!(obsSV %in% c("const", "SV"))) {
stop("obsSV needs to be either SV or const")
}
reg = !is.null(X) # is it regression
if (reg & !is.matrix(X)) {
stop("X needs to be a matrix")
}
elements_to_combine <- list(
beta_combined = rbind,
beta = function(x, y) abind::abind(x, y, along = 1),
evol_sigma_t2 = function(x, y) abind::abind(x, y, along = 1),
obs_sigma_t2 = rbind,
remainder = rbind,
Yhat = rbind
)
for(i in 1:nchains){
print(paste("Chain",i))
# model = run_with_retries(fit_ASD,
#                          retries = retries,
#                          delay = 1,
#                          y = y,
#                          X = X,
#                          Ks = Ks,
#                          Outlier = Outlier,
#                          obsSV = obsSV,
#                          ...)
model = fit_ASD(y = y,
X = X,
Ks = Ks,
Outlier = Outlier,
obsSV = obsSV,
nsave = nsave,
nburn = nburn,
nskip = nskip,
verbose = verbose)
if(i ==1){
combined_samples = model
}else{
for (element in names(elements_to_combine)) {
combined_samples$samples[[element]] <- elements_to_combine[[element]](
combined_samples$samples[[element]],
model$samples[[element]]
)
}
if(reg){
combined_samples$samples$reg_coef <- rbind(combined_samples$samples$reg_coef,
model$samples$reg_coef)
}
}
}
summary = summarize_output(mcmc_output = combined_samples$samples,
y = y,
Ks = Ks,
cl = cl,
reg = reg,
Outlier = Outlier)
return(list(summary = summary,
samples = combined_samples$samples))
}
obj = fit_BASTION(y = AirPassengers,
Ks = list(12))
#' A list containing MCMC samples of the relevant parameters:
#' - `beta_combined`: Posterior samples of **Trend + Seasonality**.
#' - `beta`: Posterior samples of each component excluding the remainder.
#' - `obs_sigma_t2`: Posterior samples of the variance of the observation equation.
#' - `evol_sigma_t2`: Posterior samples of the evolution error term.
#' - `remainder`: Posterior samples of the remainder term.
#' - `yhat`: Posterior samples of the signal + error term.
#'
#' @import progress spam abind
#' @export
fit_BASTION = function(y,Ks,X=NULL,Outlier=FALSE,cl=0.95,sparse = FALSE,obsSV = "const",
nchains = 2,nsave = 1000, nburn= 1000, nskip = 4,
verbose = TRUE){
y = as.vector(y)
if (!is.list(Ks)) {
stop("Ks needs to be a list")
}
if (!(obsSV %in% c("const", "SV"))) {
stop("obsSV needs to be either SV or const")
}
reg = !is.null(X) # is it regression
if (reg & !is.matrix(X)) {
stop("X needs to be a matrix")
}
elements_to_combine <- list(
beta_combined = rbind,
beta = function(x, y) abind::abind(x, y, along = 1),
evol_sigma_t2 = function(x, y) abind::abind(x, y, along = 1),
obs_sigma_t2 = rbind,
remainder = rbind,
Yhat = rbind
)
for(i in 1:nchains){
print(paste("Chain",i))
# model = run_with_retries(fit_ASD,
#                          retries = retries,
#                          delay = 1,
#                          y = y,
#                          X = X,
#                          Ks = Ks,
#                          Outlier = Outlier,
#                          obsSV = obsSV,
#                          ...)
model = fit_ASD(y = y,
X = X,
Ks = Ks,
Outlier = Outlier,
obsSV = obsSV,
nsave = nsave,
nburn = nburn,
nskip = nskip,
verbose = verbose)
if(i ==1){
combined_samples = model
}else{
for (element in names(elements_to_combine)) {
combined_samples$samples[[element]] <- elements_to_combine[[element]](
combined_samples$samples[[element]],
model$samples[[element]]
)
}
if(reg){
combined_samples$samples$reg_coef <- rbind(combined_samples$samples$reg_coef,
model$samples$reg_coef)
}
}
}
summary = summarize_output(mcmc_output = combined_samples$samples,
y = y,
Ks = Ks,
cl = cl,
reg = reg,
Outlier = Outlier)
return(list(summary = summary,
samples = combined_samples$samples))
}
BASTIONfit <- fit_BASTION(y = passenger,
Ks = list(12),
Outlier = FALSE,
sparse = TRUE)
BASTIONfit <- fit_BASTION(y = passenger,
Ks = list(12),
Outlier = FALSE,
sparse = TRUE)
obj = fit_BASTION(y = AirPassengers,
Ks = list(12))
air<- read.table("/Users/bc454/Desktop/Research/Project_Decomposition/Data/air traffic.csv",dec = ",",header = TRUE,sep = ",")
passenger = as.numeric(air$Int_Pax)/1000000
passenger
plot(passenger)
save(my_dataset, file = "data/my_dataset.rda")
save(passenger, file = "data/airtraffic.rda")
save(passenger, file = "data/airtraffic.rda")
seasonality
air<- read.table("/Users/bc454/Desktop/Research/Project_Decomposition/Data/air traffic.csv",dec = ",",header = TRUE,sep = ",")
air$Int_Pax = as.numeric(air$Int_Pax)/1000000
air[,c("Year","Month","Int_Pax")]
air = air[,c("Year","Month","Int_Pax")]
save(air, file = "data/airtraffic.rda")
air
#'
#' @format A data frame containing
#' \describe{
#'   \item{Year}
#'   \item{Month}
#'   \item{Int_Pax:} Number of monthly international passenger
#' }
#' @source https://www.kaggle.com/datasets/yyxian/u-s-airline-traffic-data
#' @references
#' Cho, J., et al. (2025). "Adaptive Multiple Seasonalities Decomposition with Outliers and Stochastic Volatility."
"airtraffic"
#'
#' @format A data frame containing
#' \describe{
#'   \item{Year}
#'   \item{Month}
#'   \item{Int_Pax:} Number of monthly international passenger
#' }
#' @source https://www.kaggle.com/datasets/yyxian/u-s-airline-traffic-data
#' @references
#' Cho, J., et al. (2025). "Adaptive Multiple Seasonalities Decomposition with Outliers and Stochastic Volatility."
airtraffic
library(devtoools)
library(devtools)
check()
check()
document()
document()
document()
airtraffic = air[,c("Year","Month","Int_Pax")]
save(air, file = "data/airtraffic.rda")
check()
check()
airtraffic
devtools::document()
devtools::document()
devtools::document()
load("data/airtraffic.rda")
save(airtraffic, file = "data/airtraffic.rda")
devtools::document()
load("data/airtraffic.rda")
airtraffic
airtraffic = air[,c("Year","Month","Int_Pax")]
save(airtraffic, file = "data/airtraffic.rda")
load("data/airtraffic.rda")
load("data/airtraffic.rda")
devtools::document()
export(airtraffic)
airtraffic
data(airtraffic)
fit <- fit_BASTION(y = airtraffic$Int_Pax,
Ks = list(12))
fit
plot(fit$summary$p_means$y)
#Remainder
fit$summary$p_means$Remainder
#observed data
plot(fit$summary$p_means$y)
lines(fit$summary$p_means$Trend)
#observed data
plot(fit$summary$p_means$y,ylim = c(-12,20))
lines(fit$summary$p_means$Trend)
#observed data
plot(fit$summary$p_means$y,ylim = c(-2,20))
#observed data
plot(fit$summary$p_means$y,ylim = c(-1,15))
lines(fit$summary$p_means$Trend)
lines(fit$summary$p_means$Trend,lwd = 4)
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12)
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12,type= "l")
#Remainder
plot(fit$summary$p_means$Remainder,type = "l")
#Remainder
plot(fit$summary$p_means$Remainder,type = "l",ylab = "Remainder")
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12,type= "l",ylab = "Seasonality\n k=12")
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12,type= "l",ylab = "Seasonality k=12")
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12,type= "l",ylab = "Seasonality (k=12)")
lines(fit$summary$p_means$Trend,lwd = 4,ylab = "Trend")
plot(fit$summary$p_means$Trend,lwd = 4,ylab = "Trend")
plot(fit$summary$p_means$Trend,lwd = 4,ylab = "Trend",type = "l")
#observed data
plot(fit$summary$p_means$y,ylim = c(-1,15))
#observed data
points(fit$summary$p_means$y,ylim = c(-1,15),col = "grey")
points(fit$summary$p_means$y,ylim = c(-1,15),col = "grey")
plot(fit$summary$p_means$Trend,lwd = 4,ylab = "Trend",type = "l")
points(fit$summary$p_means$y,ylim = c(-1,15),col = "grey")
plot(fit$summary$p_means$Trend,lwd = 4,ylab = "Trend",type =l)
#observed data
plot(fit$summary$p_means$y,ylim = c(-1,15))
lines(fit$summary$p_means$Trend,lwd = 4,ylab = "Trend")
#observed data
plot(fit$summary$p_means$y,ylim = c(-1,15),ylab = "Trend")
lines(fit$summary$p_means$Trend,lwd = 4)
#observed data
plot(fit$summary$p_means$y,ylim = c(-1,13),ylab = "Trend")
lines(fit$summary$p_means$Trend,lwd = 4)
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12,type= "l",ylab = "Seasonality (k=12)")
#Remainder
plot(fit$summary$p_means$Remainder,type = "l",ylab = "Remainder")
?airtraffic
###################################################
cex_s = 2             # Point size
cex.axis_s_y = 1.5       # Y-axis text size
cex.axis_s_x = 1.2       # X-axis text size
cex.main_s = 1.5         # Main title text size
cex.lab_s = 1.5         # Axis label text size
lwd_s = 3              # Line width
figure_width = 500       # Width
figure_height = 300      # Reduced height to compact space
cex_s = 2             # Point size
cex.axis_s_y = 1.5       # Y-axis text size
cex.axis_s_x = 1.2       # X-axis text size
cex.main_s = 1.5         # Main title text size
cex.lab_s = 1.5         # Axis label text size
lwd_s = 3              # Line width
figure_width = 500       # Width
figure_height = 300      # Reduced height to compact space
margin_size = c(4, 4, 0.5, 1.5)  # Reduced margins: bottom, left, top, right
png(paste0("figures/trend.PNG"),
width = figure_width, height = figure_height)
plot(y = fit$summary$p_means$y,
x = x,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
plot(fit$summary$p_means$y,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
dev.off()
plot(fit$summary$p_means$y,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
lines(fit$summary$p_means$Trend,lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1, at = x[seq(1, length(x), length.out = 6)],     # x-axis with tick marks
labels = format(x[seq(1, length(x), length.out = 6)], "%Y-%m"),
cex.axis = cex.axis_s_x)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = ylab, cex.lab = cex.lab_s, line = 2.5)
title(ylab = "Trend", cex.lab = cex.lab_s, line = 2.5)
png(paste0("figures/trend.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$y,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
lines(fit$summary$p_means$Trend,lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Trend", cex.lab = cex.lab_s, line = 2.5)
dev.off()
plot(fit$summary$p_means$Seasonal12,
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
type = "l"
lwd = 4)
plot(fit$summary$p_means$y,ylim = c(-1,13),ylab = "Trend")
lines(fit$summary$p_means$Trend,lwd = 4)
#Yearly Seasonality
plot(fit$summary$p_means$Seasonal12,type= "l",ylab = "Seasonality (k=12)")
#Remainder
plot(fit$summary$p_means$Remainder,type = "l",ylab = "Remainder")
###################################################
cex_s = 2             # Point size
cex.axis_s_y = 1.5       # Y-axis text size
cex.axis_s_x = 1.2       # X-axis text size
cex.main_s = 1.5         # Main title text size
cex.lab_s = 1.5         # Axis label text size
lwd_s = 3              # Line width
figure_width = 500       # Width
figure_height = 300      # Reduced height to compact space
png(paste0("figures/trend.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$y,
type = "p",
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
ylim = c(-1,13))
lines(fit$summary$p_means$Trend,lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Trend", cex.lab = cex.lab_s, line = 2.5)
dev.off()
png(paste0("figures/seasonality.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$Seasonal12,
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
type = "l",
lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Seasonality", cex.lab = cex.lab_s, line = 2.5)
dev.off()
png(paste0("figures/Remainder.PNG"),
width = figure_width, height = figure_height)
plot(fit$summary$p_means$Remainder,
xlab = "",
ylab = "",
main = "",
cex = cex_s,
cex.axis = cex.axis_s_x,
cex.main = cex.main_s,
axes = FALSE,
type = "l",
lwd = 4)
axis(2,cex.axis = cex.axis_s_y)
axis(1,cex.axis = cex.axis_s_x)
title(ylab = "Remainder", cex.lab = cex.lab_s, line = 2.5)
dev.off()
usethis::use_citation()
citation(BASTION)
document()
build()
check()
document()
build()
check()
data("airtraffic")
load("data/airtraffic.rda")
load("data/airtraffic.rda")
build()
data("airtraffic")
document()
document()
document()
check()
check()
devtools::build()
document()
check()
build()
check()
